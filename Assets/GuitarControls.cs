//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GuitarControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GuitarControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GuitarControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GuitarControls"",
    ""maps"": [
        {
            ""name"": ""Guitar"",
            ""id"": ""b4894d27-c680-4bfa-85d0-57a088f3210c"",
            ""actions"": [
                {
                    ""name"": ""NextPage"",
                    ""type"": ""Button"",
                    ""id"": ""369e0d6a-ebd3-45d0-8d44-d30993d99042"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrevPage"",
                    ""type"": ""Button"",
                    ""id"": ""91ce71cb-93dd-456e-88c7-d509ee9d95b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Chord_A"",
                    ""type"": ""Button"",
                    ""id"": ""04216474-76aa-4909-9e12-04e302da9797"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Chord_B"",
                    ""type"": ""Button"",
                    ""id"": ""03d064fd-ddff-465f-b85c-3525ff0b0405"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Chord_C"",
                    ""type"": ""Button"",
                    ""id"": ""fa4c3b30-e7c6-4dde-b6c5-850c97357253"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Chord_D"",
                    ""type"": ""Button"",
                    ""id"": ""6ed29bfd-3b6e-4d7e-94d9-2317ca2e2b60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Chord_E"",
                    ""type"": ""Button"",
                    ""id"": ""841ceba3-5a5e-46df-b320-ec1333d03fbc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Chord_F"",
                    ""type"": ""Button"",
                    ""id"": ""7bba13d8-6462-4234-9374-0e6190865b20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Chord_G"",
                    ""type"": ""Button"",
                    ""id"": ""a5667cb8-11cd-4b08-9578-e5e57ab76716"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],


            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2759fa02-527c-4d6b-8493-d30ae72de508"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""NextPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15c36784-0311-4b81-ba37-3b901af38761"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PrevPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4877743-5746-48f5-8738-4e34edb669da"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chord_A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d5527eb-efb2-405f-b434-fb60ca1ee333"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chord_C"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aba79493-4066-4db4-b4b4-aaeee6f71263"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chord_D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b1df623-619a-4814-9169-500b5b6f5175"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chord_E"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7134f551-5e5c-425f-ae20-9509f9764271"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chord_F"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ba07ea9-14da-41ab-ade6-14bf8820ed22"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chord_G"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""915f89ee-5d93-41ee-a33e-952b67b573bc"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chord_B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Guitar
        m_Guitar = asset.FindActionMap("Guitar", throwIfNotFound: true);
        m_Guitar_NextPage = m_Guitar.FindAction("NextPage", throwIfNotFound: true);
        m_Guitar_PrevPage = m_Guitar.FindAction("PrevPage", throwIfNotFound: true);
        m_Guitar_Chord_A = m_Guitar.FindAction("Chord_A", throwIfNotFound: true);
        m_Guitar_Chord_B = m_Guitar.FindAction("Chord_B", throwIfNotFound: true);
        m_Guitar_Chord_C = m_Guitar.FindAction("Chord_C", throwIfNotFound: true);
        m_Guitar_Chord_D = m_Guitar.FindAction("Chord_D", throwIfNotFound: true);
        m_Guitar_Chord_E = m_Guitar.FindAction("Chord_E", throwIfNotFound: true);
        m_Guitar_Chord_F = m_Guitar.FindAction("Chord_F", throwIfNotFound: true);
        m_Guitar_Chord_G = m_Guitar.FindAction("Chord_G", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Guitar
    private readonly InputActionMap m_Guitar;
    private List<IGuitarActions> m_GuitarActionsCallbackInterfaces = new List<IGuitarActions>();
    private readonly InputAction m_Guitar_NextPage;
    private readonly InputAction m_Guitar_PrevPage;
    private readonly InputAction m_Guitar_Chord_A;
    private readonly InputAction m_Guitar_Chord_B;
    private readonly InputAction m_Guitar_Chord_C;
    private readonly InputAction m_Guitar_Chord_D;
    private readonly InputAction m_Guitar_Chord_E;
    private readonly InputAction m_Guitar_Chord_F;
    private readonly InputAction m_Guitar_Chord_G;
    public struct GuitarActions
    {
        private @GuitarControls m_Wrapper;
        public GuitarActions(@GuitarControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextPage => m_Wrapper.m_Guitar_NextPage;
        public InputAction @PrevPage => m_Wrapper.m_Guitar_PrevPage;
        public InputAction @Chord_A => m_Wrapper.m_Guitar_Chord_A;
        public InputAction @Chord_B => m_Wrapper.m_Guitar_Chord_B;
        public InputAction @Chord_C => m_Wrapper.m_Guitar_Chord_C;
        public InputAction @Chord_D => m_Wrapper.m_Guitar_Chord_D;
        public InputAction @Chord_E => m_Wrapper.m_Guitar_Chord_E;
        public InputAction @Chord_F => m_Wrapper.m_Guitar_Chord_F;
        public InputAction @Chord_G => m_Wrapper.m_Guitar_Chord_G;
        public InputActionMap Get() { return m_Wrapper.m_Guitar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GuitarActions set) { return set.Get(); }
        public void AddCallbacks(IGuitarActions instance)
        {
            if (instance == null || m_Wrapper.m_GuitarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GuitarActionsCallbackInterfaces.Add(instance);
            @NextPage.started += instance.OnNextPage;
            @NextPage.performed += instance.OnNextPage;
            @NextPage.canceled += instance.OnNextPage;
            @PrevPage.started += instance.OnPrevPage;
            @PrevPage.performed += instance.OnPrevPage;
            @PrevPage.canceled += instance.OnPrevPage;
            @Chord_A.started += instance.OnChord_A;
            @Chord_A.performed += instance.OnChord_A;
            @Chord_A.canceled += instance.OnChord_A;
            @Chord_B.started += instance.OnChord_B;
            @Chord_B.performed += instance.OnChord_B;
            @Chord_B.canceled += instance.OnChord_B;
            @Chord_C.started += instance.OnChord_C;
            @Chord_C.performed += instance.OnChord_C;
            @Chord_C.canceled += instance.OnChord_C;
            @Chord_D.started += instance.OnChord_D;
            @Chord_D.performed += instance.OnChord_D;
            @Chord_D.canceled += instance.OnChord_D;
            @Chord_E.started += instance.OnChord_E;
            @Chord_E.performed += instance.OnChord_E;
            @Chord_E.canceled += instance.OnChord_E;
            @Chord_F.started += instance.OnChord_F;
            @Chord_F.performed += instance.OnChord_F;
            @Chord_F.canceled += instance.OnChord_F;
            @Chord_G.started += instance.OnChord_G;
            @Chord_G.performed += instance.OnChord_G;
            @Chord_G.canceled += instance.OnChord_G;
        }

        private void UnregisterCallbacks(IGuitarActions instance)
        {
            @NextPage.started -= instance.OnNextPage;
            @NextPage.performed -= instance.OnNextPage;
            @NextPage.canceled -= instance.OnNextPage;
            @PrevPage.started -= instance.OnPrevPage;
            @PrevPage.performed -= instance.OnPrevPage;
            @PrevPage.canceled -= instance.OnPrevPage;
            @Chord_A.started -= instance.OnChord_A;
            @Chord_A.performed -= instance.OnChord_A;
            @Chord_A.canceled -= instance.OnChord_A;
            @Chord_B.started -= instance.OnChord_B;
            @Chord_B.performed -= instance.OnChord_B;
            @Chord_B.canceled -= instance.OnChord_B;
            @Chord_C.started -= instance.OnChord_C;
            @Chord_C.performed -= instance.OnChord_C;
            @Chord_C.canceled -= instance.OnChord_C;
            @Chord_D.started -= instance.OnChord_D;
            @Chord_D.performed -= instance.OnChord_D;
            @Chord_D.canceled -= instance.OnChord_D;
            @Chord_E.started -= instance.OnChord_E;
            @Chord_E.performed -= instance.OnChord_E;
            @Chord_E.canceled -= instance.OnChord_E;
            @Chord_F.started -= instance.OnChord_F;
            @Chord_F.performed -= instance.OnChord_F;
            @Chord_F.canceled -= instance.OnChord_F;
            @Chord_G.started -= instance.OnChord_G;
            @Chord_G.performed -= instance.OnChord_G;
            @Chord_G.canceled -= instance.OnChord_G;
        }

        public void RemoveCallbacks(IGuitarActions instance)
        {
            if (m_Wrapper.m_GuitarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGuitarActions instance)
        {
            foreach (var item in m_Wrapper.m_GuitarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GuitarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GuitarActions @Guitar => new GuitarActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IGuitarActions
    {
        void OnNextPage(InputAction.CallbackContext context);
        void OnPrevPage(InputAction.CallbackContext context);
        void OnChord_A(InputAction.CallbackContext context);
        void OnChord_B(InputAction.CallbackContext context);
        void OnChord_C(InputAction.CallbackContext context);
        void OnChord_D(InputAction.CallbackContext context);
        void OnChord_E(InputAction.CallbackContext context);
        void OnChord_F(InputAction.CallbackContext context);
        void OnChord_G(InputAction.CallbackContext context);
    }
}
